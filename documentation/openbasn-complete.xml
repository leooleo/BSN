<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*******************Global Constants*******************/
//Number of sensornodes to be instantiated
const int N = 1;   
//FIFOQueue size     
const int SIZE = 10;    
// Container datatype IDs
const int acknowledge_id = 871;
const int request_id = 872;
const int sensornodedata_id = 873;
// Request types
const int UNDEFINED = 0;
const int SENSOR_DATA = 1;
const int REGISTER = 2;
const int UNREGISTER = 3;
// Acknowledge types
const int NOT_OK = 0;
const int OK = 1;
// Sensor risks (for readability)
const int low = 0;
const int moderate = 1;
const int high = 2;
const int unknown = 3;

/****************Global Data Structures****************/
typedef struct {
    int id;
    int type;
    int sourceID;
    int destinationID;
} Acknowledge;

typedef struct {
    int id;
    int type;
    int sourceID;
    int destinationID;
    int content;
} Request;

typedef struct {
    int id;
    int sensornode_id;
    int sensor_type;
    int sensor_data;
} SensorNodeData;

typedef struct {
    int datatype;
    Acknowledge acknowledge;
    Request request;
    SensorNodeData sensornodedata;
} Container;

typedef struct  {
    int[0,SIZE] len;
    Container list[SIZE+1];
} FIFOQueue;

/*******************Global Variables*******************/
FIFOQueue g_buffer;

Acknowledge a_null = {0,0,0,0};
Request r_null = {0,0,0,0,0};
SensorNodeData s_null = {0,0,0,0};
Container c_null = {0, {0,0,0,0}, {0,0,0,0,0}, {0,0,0,0}};

chan pulse_ack, killmodule;
broadcast chan pulse;

/*******************Functions*******************/
// Coloca um elemento no final da fila
void enqueue(FIFOQueue buffer, Container element){
    buffer.list[buffer.len++] = element;
}

// Remove e retorna um elemento do comeco da fila
Container dequeue(FIFOQueue buffer) {
    
    Container tail = buffer.list[buffer.len-1];
    int i = 0;
    buffer.len-=1;
    while (i &lt; buffer.len) {
        buffer.list[i] = buffer.list[i+1];
        i++;
    }

    buffer.list[i] = c_null;

    return tail;
}

// Get FIFOQueue tail - pegar "primeiro" elemento da fila
Container tail(FIFOQueue buffer){
    return buffer.list[buffer.len-1];
}

// Verifica se o buffer esta vazio
bool isEmpty(FIFOQueue buffer){
    return (buffer.list[0]==c_null)?true:false;
}

void populateLocalBuffer(FIFOQueue g_buffer, FIFOQueue l_buffer) {
    
    int i = 0;
    while(i &lt; g_buffer.len){
        enqueue(l_buffer, g_buffer.list[i]);
        i++;
    }
}

void clearBuffer(FIFOQueue buffer) {
    
    Container trash;

    while(!isEmpty(buffer)){
        trash = dequeue(buffer);
    }
}</declaration>
	<template>
		<name x="5" y="5">odsupercomponent</name>
		<declaration>clock x;</declaration>
		<location id="id0" x="-1207" y="-688">
			<name x="-1241" y="-671">module</name>
		</location>
		<location id="id1" x="-1206" y="-960">
			<name x="-1216" y="-994">wait</name>
		</location>
		<location id="id2" x="-1207" y="-824">
			<name x="-1334" y="-858">supercomponent</name>
			<label kind="invariant" x="-1275" y="-841">x&lt;=1</label>
		</location>
		<location id="id3" x="-1385" y="-824">
			<name x="-1395" y="-858">start</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="assignment" x="-1343" y="-824">x:=0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1198" y="-765">pulse_ack?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-1292" y="-748">x&gt;=0</label>
			<label kind="synchronisation" x="-1292" y="-765">pulse!</label>
			<nail x="-1241" y="-816"/>
			<nail x="-1241" y="-688"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<nail x="-1172" y="-824"/>
			<nail x="-1172" y="-960"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1257" y="-934">x&gt;=1</label>
			<label kind="assignment" x="-1258" y="-918">x:=0,
clearBuffer(g_buffer)</label>
			<nail x="-1206" y="-917"/>
		</transition>
	</template>
	<template>
		<name>sensornodemodule</name>
		<declaration>/*******************Constants*******************/
const int snd = 0;
const int req_reg = 1;

/*******************Variables*******************/
int m_id;
FIFOQueue m_buffer;
bool m_isRegistered = false;
int m_clock_tick = 0;
int m_risk;

/*******************Temporary Variables*******************/
Container container;

/*******************Functions*******************/
void send(int ctype){
    
    if(ctype==snd) {
        SensorNodeData s = {sensornodedata_id, m_id, 0, 0};
        Container c_snd = {sensornodedata_id, {0,0,0,0}, {0,0,0,0,0}, s};
        enqueue(g_buffer, c_snd);
    } else if (ctype==req_reg) {
        Request r = {request_id, REGISTER, m_id, 0, 0};
        Container c_req = {request_id, {0,0,0,0}, r, {0,0,0,0}};
        enqueue(g_buffer, c_req);
    }
}

</declaration>
		<location id="id4" x="-552" y="187">
			<name x="-629" y="195">end_processAcknowledge</name>
		</location>
		<location id="id5" x="-552" y="68">
			<name x="-612" y="77">check_acknowledge</name>
		</location>
		<location id="id6" x="-1249" y="144">
			<name x="-1308" y="161">end_processRequest</name>
		</location>
		<location id="id7" x="-1249" y="17">
			<name x="-1300" y="34">check_request</name>
		</location>
		<location id="id8" x="-1011" y="-595">
			<name x="-1054" y="-603">wait</name>
		</location>
		<location id="id9" x="-1275" y="-552">
			<name x="-1285" y="-586">end</name>
		</location>
		<location id="id10" x="-1130" y="-552">
			<name x="-1140" y="-586">teardown</name>
		</location>
		<location id="id11" x="-1130" y="-637">
			<name x="-1140" y="-671">setup</name>
		</location>
		<location id="id12" x="-1275" y="-637">
			<name x="-1285" y="-671">start</name>
		</location>
		<location id="id13" x="-952" y="382">
			<name x="-1020" y="399">send_sensornodedata</name>
		</location>
		<location id="id14" x="-1249" y="-93">
			<name x="-1326" y="-76">start_processRequest</name>
		</location>
		<location id="id15" x="-952" y="272">
		</location>
		<location id="id16" x="-1249" y="-204">
			<name x="-1317" y="-195">consume_request</name>
		</location>
		<location id="id17" x="-552" y="-34">
			<name x="-646" y="-17">start_processAcknowledge</name>
		</location>
		<location id="id18" x="-552" y="-127">
		</location>
		<location id="id19" x="-340" y="-221">
		</location>
		<location id="id20" x="-153" y="-340">
			<name x="-230" y="-323">send_request_register</name>
		</location>
		<location id="id21" x="-790" y="-221">
			<name x="-799" y="-204">exit</name>
		</location>
		<location id="id22" x="-1071" y="-314">
		</location>
		<location id="id23" x="-340" y="-340">
		</location>
		<location id="id24" x="-816" y="-408">
			<name x="-867" y="-399">check_register</name>
		</location>
		<location id="id25" x="-816" y="-510">
			<name x="-841" y="-544">running</name>
		</location>
		<location id="id26" x="42" y="-510">
			<name x="-1" y="-544">not_running</name>
			<committed/>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-527" y="110">container.acknowledge.destinationID!=m_id 
|| container.acknowledge.type!=OK</label>
			<nail x="-450" y="68"/>
			<nail x="-450" y="187"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id19"/>
			<nail x="-552" y="221"/>
			<nail x="-340" y="221"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-850" y="110">container.acknowledge.destinationID==m_id 
&amp;&amp; container.acknowledge.type==OK</label>
			<label kind="assignment" x="-850" y="144">m_isRegistered:=true, m_clock_tick:=0</label>
			<nail x="-654" y="68"/>
			<nail x="-654" y="187"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id7"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-1581" y="59">container.request.destinationID==m_id 
&amp;&amp; container.request.type==SENSOR_DATA</label>
			<label kind="assignment" x="-1572" y="93">m_risk=container.request.content</label>
			<nail x="-1351" y="17"/>
			<nail x="-1351" y="144"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-1232" y="59">container.request.destinationID!=m_id
|| container.request.type!=SENSOR_DATA</label>
			<nail x="-1139" y="17"/>
			<nail x="-1139" y="144"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id22"/>
			<nail x="-1249" y="187"/>
			<nail x="-1071" y="187"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id26"/>
			<label kind="guard" x="-323" y="-246">isEmpty(m_buffer)</label>
			<nail x="-221" y="-221"/>
			<nail x="-221" y="-221"/>
			<nail x="25" y="-221"/>
			<nail x="25" y="-476"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id26"/>
			<label kind="assignment" x="-110" y="-340">send(req_reg)</label>
			<nail x="8" y="-340"/>
			<nail x="8" y="-484"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="assignment" x="-867" y="-459">m_clock_tick+=1</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-654" y="-671">pulse_ack!</label>
			<nail x="42" y="-646"/>
			<nail x="-1011" y="-654"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1105" y="-552">killmodule?</label>
			<nail x="-1037" y="-552"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<nail x="-1037" y="-637"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-935" y="-527">pulse?</label>
			<label kind="assignment" x="-1045" y="-510">populateLocalBuffer(g_buffer, m_buffer)</label>
			<nail x="-1011" y="-510"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id10"/>
			<nail x="-875" y="-221"/>
			<nail x="-875" y="-459"/>
			<nail x="-1130" y="-459"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id26"/>
			<label kind="assignment" x="-799" y="382">send(snd),m_clock_tick:=0</label>
			<nail x="59" y="382"/>
			<nail x="59" y="-484"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id26"/>
			<label kind="guard" x="-935" y="212">!((m_risk==low &amp;&amp; m_clock_tick == 15) 
|| (m_risk==moderate &amp;&amp; m_clock_tick == 5) 
|| (m_risk==high || m_risk==unknown))</label>
			<nail x="42" y="280"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="guard" x="-1156" y="306">(m_risk==low &amp;&amp; m_clock_tick == 15) 
|| (m_risk==moderate &amp;&amp; m_clock_tick == 5) 
|| (m_risk==high || m_risk==unknown)</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id22"/>
			<label kind="guard" x="-1232" y="-221">container.datatype!=request_id</label>
			<nail x="-1088" y="-204"/>
			<nail x="-1088" y="-297"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id15"/>
			<label kind="guard" x="-1054" y="-340">isEmpty(m_buffer)</label>
			<nail x="-952" y="-314"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="-1377" y="-153">container.datatype==request_id</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id16"/>
			<label kind="guard" x="-1258" y="-357">!isEmpty(m_buffer)</label>
			<label kind="assignment" x="-1300" y="-340">container:=dequeue(m_buffer)</label>
			<nail x="-1249" y="-314"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="-544" y="-161">container.datatype!=acknowledge_id</label>
			<nail x="-357" y="-127"/>
			<nail x="-357" y="-204"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-671" y="-93">container.datatype==acknowledge_id</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-527" y="-255">!isEmpty(m_buffer)</label>
			<label kind="assignment" x="-578" y="-238">container:=dequeue(m_buffer)</label>
			<nail x="-552" y="-221"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id19"/>
			<label kind="guard" x="-391" y="-314">m_clock_tick!=1
|| m_clock_tick!=15</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id20"/>
			<label kind="guard" x="-323" y="-357">m_clock_tick==1</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id21"/>
			<label kind="guard" x="-493" y="-357">m_clock_tick==15</label>
			<nail x="-790" y="-340"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-799" y="-425">m_isRegistered==false</label>
			<nail x="-340" y="-408"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="guard" x="-1054" y="-425">m_isRegistered==true</label>
			<nail x="-1071" y="-408"/>
		</transition>
	</template>
	<template>
		<name>bodyhubmodule</name>
		<declaration>/*******************Constants*******************/
const int req_sd = 0;
const int ack    = 1; 

/*******************Variables*******************/
int m_id;
FIFOQueue m_buffer;
int m_health_risk;

/*******************Temporary Variables*******************/
Container container;
int request_type;
int sensor_risk_category=0;
int current_category;

/*******************Functions*******************/
void send(int ctype){
    
    if(ctype==req_sd) {
        Request r = {request_id, SENSOR_DATA, m_id, /*sensornode_id*/ 0, sensor_risk_category};
        Container c_req = {request_id, {0,0,0,0}, r, {0,0,0,0}};
        enqueue(g_buffer, c_req);
    } else if(ctype==ack) {
        Acknowledge a = {acknowledge_id, OK, 0, /*sensornode_id*/ 0};
        Container c_ack = {acknowledge_id, a, {0,0,0,0,0}, {0,0,0,0}};
        enqueue(g_buffer, c_ack);
    }
}


</declaration>
		<location id="id27" x="-646" y="212">
			<name x="-705" y="229">check_category</name>
		</location>
		<location id="id28" x="-646" y="425">
			<name x="-748" y="442">end_processSensorNodeData</name>
		</location>
		<location id="id29" x="-646" y="323">
			<name x="-739" y="331">persist_sensornodedata</name>
		</location>
		<location id="id30" x="-646" y="102">
			<name x="-731" y="119">categorize_sensornodedata</name>
		</location>
		<location id="id31" x="-272" y="314">
			<name x="-340" y="331">send_acknowledge</name>
		</location>
		<location id="id32" x="-85" y="365">
			<name x="-153" y="382">end_processRequest</name>
		</location>
		<location id="id33" x="-85" y="221">
			<name x="-170" y="178">unregister_sensornode</name>
		</location>
		<location id="id34" x="-272" y="221">
			<name x="-340" y="178">register_sensornode</name>
		</location>
		<location id="id35" x="-85" y="85">
			<name x="-153" y="102">check_requestType</name>
		</location>
		<location id="id36" x="-442" y="-314">
			<name x="-484" y="-323">wait</name>
		</location>
		<location id="id37" x="-680" y="-272">
			<name x="-696" y="-254">end</name>
		</location>
		<location id="id38" x="-552" y="-272">
			<name x="-578" y="-255">teardown</name>
		</location>
		<location id="id39" x="-552" y="-357">
			<name x="-578" y="-391">setup</name>
		</location>
		<location id="id40" x="-680" y="-357">
			<name x="-696" y="-392">start</name>
		</location>
		<location id="id41" x="-646" y="-8">
			<name x="-740" y="8">start_processSensorNodeData</name>
		</location>
		<location id="id42" x="-85" y="-9">
			<name x="-153" y="8">start_processRequest</name>
		</location>
		<location id="id43" x="187" y="-263">
			<name x="195" y="-255">not_running</name>
			<committed/>
		</location>
		<location id="id44" x="-314" y="-102">
		</location>
		<location id="id45" x="-314" y="-263">
			<name x="-348" y="-297">running</name>
		</location>
		<location id="id46" x="-399" y="263">
			<name x="-484" y="271">send_request_sensordata</name>
		</location>
		<location id="id47" x="-144" y="-263">
			<name x="-221" y="-246">categorize_health_risk</name>
		</location>
		<location id="id48" x="34" y="-263">
			<name x="0" y="-246">persist_status</name>
		</location>
		<init ref="id40"/>
		<transition>
			<source ref="id30"/>
			<target ref="id27"/>
			<label kind="select" x="-722" y="136">rand_category:int[0,3]</label>
			<label kind="assignment" x="-748" y="153">current_category:=rand_category</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id46"/>
			<label kind="guard" x="-629" y="178">sensor_risk_category!=current_category</label>
			<label kind="assignment" x="-629" y="195">sensor_risk_category:=current_category</label>
			<nail x="-399" y="212"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id29"/>
			<label kind="guard" x="-773" y="246">sensor_risk_category==current_category</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id43"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="guard" x="-289" y="-280">isEmpty(m_buffer)</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id45"/>
			<nail x="-756" y="425"/>
			<nail x="-748" y="-212"/>
			<nail x="-425" y="-212"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id45"/>
			<nail x="-85" y="433"/>
			<nail x="136" y="433"/>
			<nail x="144" y="-212"/>
			<nail x="-212" y="-212"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id29"/>
			<label kind="assignment" x="-544" y="323">send(req_sd)</label>
			<nail x="-399" y="323"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id30"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="assignment" x="-229" y="365">send(ack)</label>
			<nail x="-272" y="365"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id31"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id32"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id32"/>
			<label kind="guard" x="-59" y="51">request_type!=REGISTER 
&amp;&amp; request_type!=UNREGISTER</label>
			<nail x="85" y="85"/>
			<nail x="85" y="365"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id33"/>
			<label kind="guard" x="-187" y="144">request_type==UNREGISTER</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-280" y="68">request_type==REGISTER</label>
			<nail x="-272" y="85"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id35"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-527" y="-272">killmodule?</label>
			<nail x="-467" y="-272"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-255" y="-374">pulse_ack!</label>
			<nail x="187" y="-357"/>
			<nail x="-442" y="-357"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-408" y="-280">pulse?</label>
			<label kind="assignment" x="-527" y="-425">populateLocalBuffer(g_buffer,m_buffer)</label>
			<nail x="-442" y="-263"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id36"/>
			<nail x="-468" y="-356"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id37"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="guard" x="-289" y="-195">container.datatype!=sensornodedata_id
||  container.datatype!=request_id</label>
			<nail x="-297" y="-119"/>
			<nail x="-297" y="-246"/>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id41"/>
			<label kind="guard" x="-629" y="-119">container.datatype==sensornodedata_id</label>
			<nail x="-646" y="-102"/>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id42"/>
			<label kind="guard" x="-280" y="-119">container.datatype==request_id</label>
			<label kind="assignment" x="-296" y="-102">request_type:=container.request.type</label>
			<nail x="-85" y="-102"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id44"/>
			<label kind="guard" x="-467" y="-195">!isEmpty(m_buffer)</label>
			<label kind="assignment" x="-552" y="-178">container:=dequeue(m_buffer)</label>
			<nail x="-331" y="-246"/>
			<nail x="-331" y="-119"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id48"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Process = Template();

// List one or more processes to be composed into a system.
system odsupercomponent,bodyhubmodule,sensornodemodule;
    </system>
	<queries>
	</queries>
</nta>
